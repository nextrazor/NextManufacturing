// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextBackend.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NextBackend.Migrations
{
    [DbContext(typeof(NmaContext))]
    partial class NmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NextBackend.DAL.CalendarState", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CalendarStates");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("17c94115-07cc-4326-9ab4-66d4155cfe1a"),
                            Name = "Работает"
                        },
                        new
                        {
                            Guid = new Guid("68ed1833-de39-435f-9e7b-e87325a35ad5"),
                            Name = "Перерыв"
                        });
                });

            modelBuilder.Entity("NextBackend.DAL.CalendarTemplate", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DefaultStateGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("default_state_guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("PeriodDuration")
                        .HasColumnType("interval")
                        .HasColumnName("period_duration");

                    b.Property<DateTimeOffset>("ReferenceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reference_date");

                    b.HasKey("Guid");

                    b.HasIndex("DefaultStateGuid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CalendarTemplates");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("b462c5b6-cecb-41f7-922d-a62a565a85ea"),
                            DefaultStateGuid = new Guid("17c94115-07cc-4326-9ab4-66d4155cfe1a"),
                            Name = "Круглосуточный",
                            PeriodDuration = new TimeSpan(1, 0, 0, 0, 0),
                            ReferenceDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("NextBackend.DAL.CalendarTemplateSpan", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("CalendarTemplateGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_template_guid");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("interval")
                        .HasColumnName("from_time");

                    b.Property<Guid>("StateGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("state_guid");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("interval")
                        .HasColumnName("to_time");

                    b.HasKey("Guid");

                    b.HasIndex("CalendarTemplateGuid");

                    b.HasIndex("StateGuid");

                    b.ToTable("CalendarTemplateSpans");

                    b.HasCheckConstraint("CK_CalendarTemplates_FromTo", "from_time < to_time");
                });

            modelBuilder.Entity("NextBackend.DAL.Resource", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("7bb90a66-f18b-4acc-ae91-49d535e0d189"),
                            Name = "Станок токарный (инв. 120)"
                        },
                        new
                        {
                            Guid = new Guid("9e1d6ec8-5875-4dd7-b0c3-8134006d25a1"),
                            Name = "Станок токарный (инв. 122)"
                        },
                        new
                        {
                            Guid = new Guid("bbfcf611-5234-4f61-9502-991e340006bb"),
                            Name = "Станок фрезерный (инв. 212)"
                        });
                });

            modelBuilder.Entity("NextBackend.DAL.ResourceCalendar", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("CalendarTemplateGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_template_guid");

                    b.Property<DateTimeOffset>("FromTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_time");

                    b.Property<Guid>("ResourceGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_guid");

                    b.HasKey("Guid");

                    b.HasIndex("CalendarTemplateGuid");

                    b.HasIndex("ResourceGuid", "FromTime")
                        .IsUnique();

                    b.ToTable("ResourceCalendars");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("8b92dc58-6f6a-42a8-a4ff-6fdec803d94c"),
                            CalendarTemplateGuid = new Guid("b462c5b6-cecb-41f7-922d-a62a565a85ea"),
                            FromTime = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ResourceGuid = new Guid("7bb90a66-f18b-4acc-ae91-49d535e0d189")
                        },
                        new
                        {
                            Guid = new Guid("f4fb391b-0519-4e38-98b5-c8ce6829e893"),
                            CalendarTemplateGuid = new Guid("b462c5b6-cecb-41f7-922d-a62a565a85ea"),
                            FromTime = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ResourceGuid = new Guid("9e1d6ec8-5875-4dd7-b0c3-8134006d25a1")
                        },
                        new
                        {
                            Guid = new Guid("800037d5-cd8a-4d19-958e-3732b1864b91"),
                            CalendarTemplateGuid = new Guid("b462c5b6-cecb-41f7-922d-a62a565a85ea"),
                            FromTime = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ResourceGuid = new Guid("bbfcf611-5234-4f61-9502-991e340006bb")
                        });
                });

            modelBuilder.Entity("NextBackend.DAL.CalendarTemplate", b =>
                {
                    b.HasOne("NextBackend.DAL.CalendarState", "DefaultState")
                        .WithMany()
                        .HasForeignKey("DefaultStateGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultState");
                });

            modelBuilder.Entity("NextBackend.DAL.CalendarTemplateSpan", b =>
                {
                    b.HasOne("NextBackend.DAL.CalendarTemplate", "CalendarTemplate")
                        .WithMany("Spans")
                        .HasForeignKey("CalendarTemplateGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextBackend.DAL.CalendarState", "State")
                        .WithMany()
                        .HasForeignKey("StateGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarTemplate");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NextBackend.DAL.ResourceCalendar", b =>
                {
                    b.HasOne("NextBackend.DAL.CalendarTemplate", "CalendarTemplate")
                        .WithMany()
                        .HasForeignKey("CalendarTemplateGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextBackend.DAL.Resource", "Resource")
                        .WithMany("CalendarSpans")
                        .HasForeignKey("ResourceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarTemplate");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("NextBackend.DAL.CalendarTemplate", b =>
                {
                    b.Navigation("Spans");
                });

            modelBuilder.Entity("NextBackend.DAL.Resource", b =>
                {
                    b.Navigation("CalendarSpans");
                });
#pragma warning restore 612, 618
        }
    }
}
